mask <- bwlabel(mask)
ftrs <- sfeatures(mask)
dat <- unlist(lapply(ftrs, function(x) x[,'m.pxs']))
if(length(which(!is.na(dat)))==0) {
ms9_2 <- "No object detected"
cat(ms9_2, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
return("No object detected")
}
png(file=paste0(intdir, file, "_", from, "-", to, "_sizeprofile.png"))
par(mar = c(5,4,4,5))
plot(dat, ylim=c(0, max(dat)))
dev.off()
smallobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] < 40))
largeobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] > large))
largeobjfr <- which(sapply(largeobj, length)!=0)
mask <- rmObjects(mask, smallobj)
write(largeobjfr, file=paste0(intdir, file, "_", from, "-", to, "_largeobj.txt"))
# Try to segment large objects by local thresholding
if((length(largeobjfr)==1 && max(mask[,,largeobjfr]) < 2)
|| (length(largeobjfr)>1 && min(apply(mask[,,largeobjfr], 3, max)) < 2)){
ms10 <- paste0("Objects larger than ", large, "px were detected. Applying local thresholding.")
cat(ms10, sep="\n")
cat(ms10, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
locmask <- EBImage::thresh(normalize(nobg[,,largeobjfr]), 20, 20, 0.4)
locmask <- bwlabel(locmask)
ftrs <- sfeatures(locmask)
smallobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] < 40))
mask[,,largeobjfr] <- rmObjects(locmask, smallobj)
largeobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] > large))
largeobjfr <- largeobjfr[which(sapply(largeobj, length)!=0)]
write(largeobjfr, file=paste0(intdir, file, "_", from, "-", to, "_largeobj2.txt"))
}
# If fused objects persist, use watershed segmentation
if((length(largeobjfr)==1 && max(mask[,,largeobjfr]) < 2)
|| (length(largeobjfr)>1 && min(apply(mask[,,largeobjfr], 3, max)) < 2)){
ms10_2 <- paste0("Objects larger than ", large, "px were detected. Applying watershed segmentation.")
cat(ms10_2, sep="\n")
cat(ms10_2, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
distmapmask <- distmap(mask[,,largeobjfr])
watershedmask <- watershed(distmapmask, ext = 7)
ftrs <- sfeatures(watershedmask) # Needs 1> frames? Issue with video 101
smallobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] < 40))
mask[,,largeobjfr] <- rmObjects(watershedmask, smallobj)
largeobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] > large))
largeobjfr <- largeobjfr[which(sapply(largeobj, length)!=0)]
write(largeobjfr, file=paste0(intdir, file, "_", from, "-", to, "_largeobj3.txt"))
}
# If fused objects persist, use voronoi-based segmentation
if((length(largeobjfr)==1 && max(mask[,,largeobjfr]) < 2)
|| (length(largeobjfr)>1 && min(apply(mask[,,largeobjfr], 3, max)) < 2)){
ms11 <- paste0("Objects larger than ", large, "px persisted. Applying voronoi segmentation.")
cat(ms11, sep="\n")
cat(ms11, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
for (j in largeobjfr){
if(j==1) break
seedfr <- j - 1
ftrs <- sfeatures(mask[,,seedfr])
seedimg <- mask[,,seedfr]*0
for(l in 1:nrow(ftrs[[1]])){
seedimg[ftrs[[1]][l, 'm.x'], ftrs[[1]][l, 'm.y']] <- 1
}
seedimg <- bwlabel(seedimg)
mask[,,j] <- propagate(mask[,,j], seedimg, mask[,,j])
}
ftrs <- sfeatures(mask)
largeobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] > large))
largeobjfr <- largeobjfr[which(sapply(largeobj, length)!=0)]
}
rm(nobg)
# To remove small object
ftrs <- sfeatures(mask)
write(largeobjfr, file=paste0(intdir, file, "_", from, "-", to, "_largeobjFin.txt"))
dat <- unlist(lapply(ftrs, function(x) x[,'m.pxs']))
if(length(which(!is.na(dat)))==0) {
ms12_2 <- "No object detected"
cat(ms12_2, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
return("No object detected")
}
png(file=paste0(intdir, file, "_", from, "-", to, "_sizeprofilefin.png"))
par(mar = c(5,4,4,5))
plot(dat, ylim=c(0, max(dat)))
dev.off()
saveRDS(ftrs, file=paste0(intdir, file, "_", from, "-", to, ".rds"))
ftrfiles[bn+1] <- paste0(intdir, file, "_", from, "-", to, ".rds")
# Generate an mp4 animation for the mask
if(maskmovie==T){
ms13 <- paste0("Creating a movie of the mask.")
cat(ms13, sep="\n")
cat(ms13, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
moviemask(dir, file, mask, from=from, to=to, 5)
}
rm(mask)
}
# Concatenate all the feature list
ftrslist <- list()
for(i in 1:length(ftrfiles)){
if(is.null(ftrfiles[[i]])) next
ftrslist[[i]] <- readRDS(ftrfiles[[i]])
}
ftrs <- unlist(ftrslist, recursive=F)
saveRDS(ftrs, file=paste0(intdir, file, "_", start, "-", end, "_ftrs.rds"))
#ftrs <- readRDS(file=paste0(intdir, file, "_", start, "-", end, "_ftrs.rds"))
# Run tracking function
ms12 <- paste0("Running tracking function.")
cat(ms12, sep="\n")
cat(ms12, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
#res <- tracking(mask, maxdist=maxdist, size=size, ftrs=ftrs, unit=unit, interval=1/fps)
res <- tracking(w=w, h=h, maxdist=maxdist, size=size, ftrs=ftrs, unit=unit, interval=1/fps)
writeImage(res[[1]], file=paste0(intdir, file, "_", start, "-", end, ".png"))
# Save results of tracking for future analysis
saveRDS(res, file=paste0(intdir, file, "_", start, "-", end, ".rds"))
} else {
res <- readRDS(file=paste0(intdir, file, "_", start, "-", end, ".rds"))
#reslist <- readRDS(file=paste0(intdir, file, "_reslist", ".rds"))
#threshbody <- reslist$threshbody
}
# Overlay trajectories onto the first frame
flycol <- rgbImage(firstfr, firstfr, firstfr)
flyresbl <- res[[1]][,,1]>0|res[[1]][,,2]>0|res[[1]][,,3]>0
flyres <- Image(sweep(flycol, 1:2, (1-flyresbl), "*")) + res[[1]][,,1:3] # Ignore alpha channel of the png
colorMode(flyres) <- "Color"
writeImage(flyres, file=paste0(intdir, file, "_", start, "-", end, "_overlay", ".png"))
# Detect discontinuous trajectories
objnum <- 1:max((res[[2]][,"obj"]))
if (length(objnum) > 1){
disconframe <- sapply(objnum, function(x) res[[2]][max(which(res[[2]][,"obj"]==x & !is.na(res[[2]][,"x"]))),"frame"])
for(d in disconframe){
fly <- readAVI(paste0(dir, "/", file), d-50, d+50)
nobg <- -ssweep(fly, bg, "-")
rm(fly)
nobg <- ssweep(nobg, arenamask, "*")
mask <- nobg > threshbody
kern3 <- makeBrush(size=3, shape="diamond")
mask <- opening(mask, kern3)
mask <- bwlabel(mask)
ftrs <- sfeatures(mask)
png(file=paste0(intdir, file, "_", d-50, "-", d+50, "_sizeprofile.png"))
par(mar = c(5,4,4,5))
dat <- unlist(lapply(ftrs, function(x) x[,'m.pxs']))
plot(dat, ylim=c(0, max(dat)))
dev.off()
smallobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] < 40))
largeobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] > large))
largeobjfr <- which(sapply(largeobj, length)!=0)
mask <- rmObjects(mask, smallobj)
writeImage(mask, file=paste0(intdir, file, "_", d-50, "-", d+50, "_mask.tiff"))
}
}
# Detect jumps
speedmat <- matrix(nrow=(end - start + 1), res[[2]][,'speed'])
speeddiff <- diff(speedmat, lag=3)*fps/3
highspeed <- which(speeddiff > spthresh*fps, arr.ind = T)
if(length(highspeed)!=0){
speedpeaks <- 1:nrow(highspeed)
for(hsp in 1:nrow(highspeed)){
speedpeaks[hsp] <- max(speeddiff[ifelse((highspeed[hsp,1]-80) < 1, 1, (highspeed[hsp,1]-80)):
ifelse((highspeed[hsp,1]+80)>nrow(speeddiff), nrow(speeddiff), (highspeed[hsp,1]+80)),
highspeed[hsp,2]], na.rm=T)
}
speedpeakpos <- which(matrix(speeddiff%in%unique(speedpeaks), dim(speeddiff)[1], dim(speeddiff)[2]), arr.ind=T)[,1]
if(length(speedpeakpos)>1){
for(p in 1:(length(speedpeakpos)-1)){
if((speedpeakpos[p+1]-speedpeakpos[p])==1){
speedpeakpos[p] <- speedpeakpos[p+1]
}
}
}
speedpeakpos <- unique(speedpeakpos)
} else {
speedpeakpos <- NULL
ms19 <- paste0("No jumps were detected.")
cat(ms19, sep="\n")
cat(ms19, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
}
# Output intensity profile, motion speed, and jumps
if(DLO==T){
## Plot
png(file=paste0(intdir, file, "_", start, "-", end, "_intjumpprofile.png"), width=900, height=900)
par(mar = c(5,4,4,5))
matplot(-intdiffall[start:end], type="l", col="red", ylim=c(-10, 2), xlab="frame", ylab="Intensity change")
par(new=T)
matplot(speedmat, type="l", axes = F, xlab = NA, ylab = NA, ylim=c(0, 200))
axis(side = 4)
mtext("mm/sec", side=4, line=2)
if(!is.null(speedpeakpos)) mtext(1:length(speedpeakpos), side=3, at=speedpeakpos)
dev.off()
} else {
png(file=paste0(intdir, file, "_", start, "-", end, "_jumpprofile.png"), width=900, height=900)
par(mar = c(5,4,4,5))
matplot(speedmat, type="l", lty=1, ylim=c(0, 100), xlab="frame", ylab="speed (mm/sec)")
if(!is.null(speedpeakpos)) mtext(1:length(speedpeakpos), side=3, at=speedpeakpos)
dev.off()
png(file=paste0(intdir, file, "_", start, "-", end, "_speeddiff.png"), width=900, height=900)
par(mar = c(5,4,4,5))
matplot(speeddiff, type="l", lty=1, ylim=c(-5000, 5000), xlab="frame", ylab="acceleration (mm/sec2)")
if(!is.null(speedpeakpos)) mtext(1:length(speedpeakpos), side=3, at=speedpeakpos)
dev.off()
}
# Detect jump regions
if(is.null(speedpeakpos)){
jumpfr <- NA
jumps <- NA
} else {
jumpfr <- as.vector(sapply(speedpeakpos, function(x) seq(from=x, by=1, length.out=6)))
jumps <- res[[2]][which(res[[2]][,c('frame')]%in%jumpfr), c('obj', 'x', 'y', 'speed', 'frame')]
}
# Detect single digital looming object
if(DLOonly==T){
intdiffmax <- max(intdiffall)
if(intdiffmax > 2){
DLOlastfr <- which(intdiffall==intdiffmax)
print(paste0("DLO was given at the ", DLOlastfr, "th frame from ", start, "!"))
DLOframes <- which(res[[2]][,"frame"]%in%c((DLOlastfr-90):DLOlastfr))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
} else {
DLOlastfr <- NULL
print(paste0("DLO was not detected."))
DLOframes <- which(res[[2]][,"frame"]%in%c(start:end))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
}
} else {
gender <- "N"
DLOlastfr <- NULL
print(paste0("DLO detection skipped."))
DLOframes <- which(res[[2]][,"frame"]%in%c(start:end))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
}
# Gender detection
if(gender!="N"){
ms14 <- paste0("Detecting gender.")
cat(ms14, sep="\n")
cat(ms14, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
dt <- data.table(res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("obj", "size")])
DLOflies <- cbind(DLOflies, gender=NA)
gen <- dt[, list(median=median(size)), by=obj]
if(gender=="MF"|gender=="FM"){
for(k in 1:length(gen)){
if(gen[k]$median < 170) {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "M"
} else {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "F"
}
}
}
if(gender=="MM"|gender=="FF"|gender=="S"){
for(k in 1:length(gen)){
if(gen[k]$median < 227) {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "M"
} else {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "F"
}
}
}
}else {
ms15 <- "Skipped gender detection."
cat(ms15, sep="\n")
cat(ms15, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
gen <- NULL
}
library(data.table)
install.packages("data.table")
library(data.table)
# Gender detection
if(gender!="N"){
ms14 <- paste0("Detecting gender.")
cat(ms14, sep="\n")
cat(ms14, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
dt <- data.table(res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("obj", "size")])
DLOflies <- cbind(DLOflies, gender=NA)
gen <- dt[, list(median=median(size)), by=obj]
if(gender=="MF"|gender=="FM"){
for(k in 1:length(gen)){
if(gen[k]$median < 170) {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "M"
} else {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "F"
}
}
}
if(gender=="MM"|gender=="FF"|gender=="S"){
for(k in 1:length(gen)){
if(gen[k]$median < 227) {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "M"
} else {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "F"
}
}
}
}else {
ms15 <- "Skipped gender detection."
cat(ms15, sep="\n")
cat(ms15, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
gen <- NULL
}
dt <- data.frame(res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("obj", "size")])
DLOflies <- cbind(DLOflies, gender=NA)
str(DLOflies)
DLOflies
# Detect single digital looming object
if(DLOonly==T){
intdiffmax <- max(intdiffall)
if(intdiffmax > 2){
DLOlastfr <- which(intdiffall==intdiffmax)
print(paste0("DLO was given at the ", DLOlastfr, "th frame from ", start, "!"))
DLOframes <- which(res[[2]][,"frame"]%in%c((DLOlastfr-90):DLOlastfr))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
} else {
DLOlastfr <- NULL
print(paste0("DLO was not detected."))
DLOframes <- which(res[[2]][,"frame"]%in%c(start:end))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
}
} else {
gender <- "N"
DLOlastfr <- NULL
print(paste0("DLO detection skipped."))
DLOframes <- which(res[[2]][,"frame"]%in%c(start:end))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
}
DLOflies
res
res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
DLOframes
DLOlastfr
intdiffmax
DLOlastfr
DLOframes
DLOframes <- which(res[[2]][,"frame"]%in%c((DLOlastfr-90):DLOlastfr))
DLOframes
res[[2]][,"frame"]
end
res <- readRDS(file=paste0(intdir, file, "_", start, "-", end, ".rds"))
res[[2]][,"frame"]
start
# Overlay trajectories onto the first frame
flycol <- rgbImage(firstfr, firstfr, firstfr)
flyresbl <- res[[1]][,,1]>0|res[[1]][,,2]>0|res[[1]][,,3]>0
flyres <- Image(sweep(flycol, 1:2, (1-flyresbl), "*")) + res[[1]][,,1:3] # Ignore alpha channel of the png
colorMode(flyres) <- "Color"
writeImage(flyres, file=paste0(intdir, file, "_", start, "-", end, "_overlay", ".png"))
# Detect discontinuous trajectories
objnum <- 1:max((res[[2]][,"obj"]))
if (length(objnum) > 1){
disconframe <- sapply(objnum, function(x) res[[2]][max(which(res[[2]][,"obj"]==x & !is.na(res[[2]][,"x"]))),"frame"])
for(d in disconframe){
fly <- readAVI(paste0(dir, "/", file), d-50, d+50)
nobg <- -ssweep(fly, bg, "-")
rm(fly)
nobg <- ssweep(nobg, arenamask, "*")
mask <- nobg > threshbody
kern3 <- makeBrush(size=3, shape="diamond")
mask <- opening(mask, kern3)
mask <- bwlabel(mask)
ftrs <- sfeatures(mask)
png(file=paste0(intdir, file, "_", d-50, "-", d+50, "_sizeprofile.png"))
par(mar = c(5,4,4,5))
dat <- unlist(lapply(ftrs, function(x) x[,'m.pxs']))
plot(dat, ylim=c(0, max(dat)))
dev.off()
smallobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] < 40))
largeobj <- lapply(ftrs, function(x) which(x[, 'm.pxs'] > large))
largeobjfr <- which(sapply(largeobj, length)!=0)
mask <- rmObjects(mask, smallobj)
writeImage(mask, file=paste0(intdir, file, "_", d-50, "-", d+50, "_mask.tiff"))
}
}
# Detect jumps
speedmat <- matrix(nrow=(end - start + 1), res[[2]][,'speed'])
speeddiff <- diff(speedmat, lag=3)*fps/3
highspeed <- which(speeddiff > spthresh*fps, arr.ind = T)
if(length(highspeed)!=0){
speedpeaks <- 1:nrow(highspeed)
for(hsp in 1:nrow(highspeed)){
speedpeaks[hsp] <- max(speeddiff[ifelse((highspeed[hsp,1]-80) < 1, 1, (highspeed[hsp,1]-80)):
ifelse((highspeed[hsp,1]+80)>nrow(speeddiff), nrow(speeddiff), (highspeed[hsp,1]+80)),
highspeed[hsp,2]], na.rm=T)
}
speedpeakpos <- which(matrix(speeddiff%in%unique(speedpeaks), dim(speeddiff)[1], dim(speeddiff)[2]), arr.ind=T)[,1]
if(length(speedpeakpos)>1){
for(p in 1:(length(speedpeakpos)-1)){
if((speedpeakpos[p+1]-speedpeakpos[p])==1){
speedpeakpos[p] <- speedpeakpos[p+1]
}
}
}
speedpeakpos <- unique(speedpeakpos)
} else {
speedpeakpos <- NULL
ms19 <- paste0("No jumps were detected.")
cat(ms19, sep="\n")
cat(ms19, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
}
# Output intensity profile, motion speed, and jumps
if(DLO==T){
## Plot
png(file=paste0(intdir, file, "_", start, "-", end, "_intjumpprofile.png"), width=900, height=900)
par(mar = c(5,4,4,5))
matplot(-intdiffall[start:end], type="l", col="red", ylim=c(-10, 2), xlab="frame", ylab="Intensity change")
par(new=T)
matplot(speedmat, type="l", axes = F, xlab = NA, ylab = NA, ylim=c(0, 200))
axis(side = 4)
mtext("mm/sec", side=4, line=2)
if(!is.null(speedpeakpos)) mtext(1:length(speedpeakpos), side=3, at=speedpeakpos)
dev.off()
} else {
png(file=paste0(intdir, file, "_", start, "-", end, "_jumpprofile.png"), width=900, height=900)
par(mar = c(5,4,4,5))
matplot(speedmat, type="l", lty=1, ylim=c(0, 100), xlab="frame", ylab="speed (mm/sec)")
if(!is.null(speedpeakpos)) mtext(1:length(speedpeakpos), side=3, at=speedpeakpos)
dev.off()
png(file=paste0(intdir, file, "_", start, "-", end, "_speeddiff.png"), width=900, height=900)
par(mar = c(5,4,4,5))
matplot(speeddiff, type="l", lty=1, ylim=c(-5000, 5000), xlab="frame", ylab="acceleration (mm/sec2)")
if(!is.null(speedpeakpos)) mtext(1:length(speedpeakpos), side=3, at=speedpeakpos)
dev.off()
}
# Detect jump regions
if(is.null(speedpeakpos)){
jumpfr <- NA
jumps <- NA
} else {
jumpfr <- as.vector(sapply(speedpeakpos, function(x) seq(from=x, by=1, length.out=6)))
jumps <- res[[2]][which(res[[2]][,c('frame')]%in%jumpfr), c('obj', 'x', 'y', 'speed', 'frame')]
}
DLOonly
intdiffmax <- max(intdiffall)
intdiffmax
DLOlastfr <- which(intdiffall==intdiffmax)
print(paste0("DLO was given at the ", DLOlastfr, "th frame from ", start, "!"))
intdiffall
start
DLOframes
start
samplesqDLO <- readAVI(paste0(dir, "/", file), start, end, crop=c(220,240,220,240))
intprofileDLO <- apply(samplesqDLO, 3, mean)
rm(samplesq)
rm(samplesqDLO)
intdiffDLO <- diff(intprofileDLO, lag=3)
intdiffDLOmax <- max(intdiffDLO)
if(intdiffDLOmax > 2){
DLOlastfr <- which(intdiffDLO==intdiffDLOmax)
print(paste0("DLO was given at the ", DLOlastfr, "th frame from ", start, "!"))
DLOframes <- which(res[[2]][,"frame"]%in%c((DLOlastfr-90):DLOlastfr))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
} else {
DLOlastfr <- NULL
print(paste0("DLO was not detected."))
DLOframes <- which(res[[2]][,"frame"]%in%c(start:end))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
}
# Detect single digital looming object
if(DLOonly==T){
samplesqDLO <- readAVI(paste0(dir, "/", file), start, end, crop=c(220,240,220,240))
intprofileDLO <- apply(samplesqDLO, 3, mean)
rm(samplesqDLO)
intdiffDLO <- diff(intprofileDLO, lag=3)
intdiffDLOmax <- max(intdiffDLO)
if(intdiffDLOmax > 2){
DLOlastfr <- which(intdiffDLO==intdiffDLOmax)
print(paste0("DLO was given at the ", DLOlastfr, "th frame from ", start, "!"))
DLOframes <- which(res[[2]][,"frame"]%in%c((DLOlastfr-90):DLOlastfr))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
} else {
DLOlastfr <- NULL
print(paste0("DLO was not detected."))
DLOframes <- which(res[[2]][,"frame"]%in%c(start:end))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
}
} else {
gender <- "N"
DLOlastfr <- NULL
print(paste0("DLO detection skipped."))
DLOframes <- which(res[[2]][,"frame"]%in%c(start:end))
DLOflies <- res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("frame", "obj", "x", "y", "speed", "size")]
}
# Gender detection
if(gender!="N"){
ms14 <- paste0("Detecting gender.")
cat(ms14, sep="\n")
cat(ms14, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
dt <- data.frame(res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("obj", "size")])
DLOflies <- cbind(DLOflies, gender=NA)
gen <- dt[, list(median=median(size)), by=obj]
if(gender=="MF"|gender=="FM"){
for(k in 1:length(gen)){
if(gen[k]$median < 170) {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "M"
} else {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "F"
}
}
}
if(gender=="MM"|gender=="FF"|gender=="S"){
for(k in 1:length(gen)){
if(gen[k]$median < 227) {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "M"
} else {
DLOflies[DLOflies$obj==gen[k]$obj, "gender"] <- "F"
}
}
}
}else {
ms15 <- "Skipped gender detection."
cat(ms15, sep="\n")
cat(ms15, file=paste0(intdir, file, "_messages.txt"), append=T, sep="\n")
gen <- NULL
}
DLOframes
res[[2]][DLOframes,"speed"])]
res[[2]][DLOframes,"speed"]
res[[2]][DLOframes[!is.na(res[[2]][DLOframes,"speed"])], c("obj", "size")]
DLOflies
